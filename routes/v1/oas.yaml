openapi: 3.0.0
info:
  version: 1.0.0
  title: E18 API
  description: Spec for VTFK E18 API
  contact: 
    email: utvikling@vtfk.no
tags:
  - name: Jobs
    description: A collection of tasks
  - name: Ready tasks
    description: Gets tasks that are ready to be run
  - name: Tasks
    description: Tasks inside jobs to be executed by robots
  - name: Statistics
    description: Retreive statistics from E18
  - name: APIKeys
    description: Requests for handeling API Keys
  - name: Documentation
    description: Serves the API documentation
servers:
  - description: Hosted endpoint
    url: '{protocol}://{fqdn}:{port}{pathPrefix}/api/v1/'
    variables:
      protocol:
        enum: ['http', 'https']
        default: 'https'
      fqdn:
        enum: ['api.vtfk.no', 'api.vtfk.dev']
        default: 'api.vtfk.no'
      pathPrefix:
        default: /e18
      port:
        enum: ['80', '443', '8080', '8081', '8082', '8083', '8084', '8085', '8086', '8087', '8088', '8089', '8090']
        default: '443'
  - description: 'Local development'
    url: 'http://localhost:{port}/api/v1'
    variables:
      port:
        enum: ['80', '443', '8080', '8081', '8082', '8083', '8084', '8085', '8086', '8087', '8088', '8089', '8090']
        default: '8080'
paths:
  /jobs:
    get:
      operationId: getJobs
      summary: Gets all or a selection of jobs
      description: Gets all or a selection of jobs
      tags:
        - Jobs
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/orderby"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: postJob
      summary: Creates a new job
      description: Creates a new job in the job queue
      tags:
        - Jobs
      security:
        - APIKey: []
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /jobs/{id}:
    get:
      operationId: getJob
      summary: Gets a specific job
      description: Gets a specific job by id
      tags:
        - Jobs
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: putJob
      summary: Updates a job
      description: Updates a job in the job queue
      tags:
        - Jobs
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /jobs/{id}/complete:
    put:
      operationId: completeJob
      summary: Sets an self-execution job to completed
      tags:
        - Jobs
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /readytasks:
    get:
      operationId: getReadyTasks
      summary: Gets a list of tasks that are ready to be done
      tags:
        - Ready tasks
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - in: query
          name: type
          description: The type of tasks you want returned
          schema:
            type: string
            example: svarut
        - in: query
          name: checkout
          description: Also checksout the tasks returned
          schema:
            type: boolean
            example: true
            default: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    allOf:
                      $ref: '#/components/schemas/Task'
                    collectedData:
                      type: object
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /tasks:
    get:
      operationId: getTasks
      summary: Gets all or a selection of tasks
      description: Gets all or a selection of tasks
      tags:
        - Tasks
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/orderby"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /jobs/{id}/tasks:
    get:
      operationId: getJobTasks
      summary: Gets all tasks for a job
      tags:
        - Tasks
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: postJobTask
      summary: Posts a new task to a job
      tags:
        - Tasks
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /jobs/{id}/tasks/{taskid}/operations:
    post:
      operationId: postTaskOperation
      summary: Report back the result of an attempted task execution
      tags:
        - Tasks
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
        - in: path
          name: taskid
          required: true
          schema:
            $ref: '#/components/schemas/MongoDBId'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TaskOperationSuccess'
                - $ref: '#/components/schemas/TaskOperationFailed'
              discriminator:
                propertyName: status
                mapping:
                  completed: '#/components/schemas/TaskOperationSuccess'
                  failed: '#/components/schemas/TaskOperationFailed'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /statistics:
    get:
      operationId: getStatistics
      summary: Gets statistics,
      tags:
        - Statistics
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/orderby"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /statistics/maintain:
    post:
      operationId: maintainStatistics
      summary: Maintains statistics
      description: Runs the procedure to move jobs over to statistics entries
      tags:
        - Statistics
      security:
        - APIKey: []
        - Bearer: []
      responses:
        200:
          description: Ok
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /statistics/lean:
    get:
      operationId: getLeanStatistics
      summary: Get leaned statistics (faster)
      tags:
        - Statistics
      security:
        - APIKey: []
        - Bearer: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /apikeys:
    get:
      operationId: getAPIKeys
      summary: Gets all or a selection of API Keys
      description: Gets all or a selection of API Keys
      tags:
        - APIKeys
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/orderby"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    post:
      operationId: postAPIKey
      summary: Creates a new APIKey
      tags:
        - APIKeys
      security:
        - APIKey: []
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /apikeys/{id}:
    get:
      operationId: getAPIKey
      summary: Gets a specific APIKey
      description: Gets a specific APIKey by id
      tags:
        - APIKeys
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      operationId: putAPIKey
      summary: Updates an APIKey
      tags:
        - APIKeys
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteAPIKey
      summary: Deletes an APIKey
      tags:
        - APIKeys
      security:
        - APIKey: []
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Ok
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /docs:
    get:
      operationId: serveDocs
      summary: Servers the API documentation
      tags:
        - Documentation
      responses:
        200:
          description: Ok
components:
  schemas:
    Job:
      description: Represents a single job
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/MongoDBId'
        system:
          type: string
          description: The system this job originates from
          example: IDM
          minLength: 1
        type:
          type: string
          description: The type of job this is for the sytem
          minLength: 1
        status:
          $ref: '#/components/schemas/Statuses'
        projectId:
          type: number
          description: The project id this job relates to
          minimum: 0
        e18:
          type: boolean
          description: Should the job be processed
          default: true
        delayUntil:
          $ref: '#/components/schemas/DateTime'
        regarding:
          type: string
          description: What this job regards. Shall not contain personal information
        contact:
          type: string
          description: Contact information regarding this job, will be deleted when moved to statistics
        comment:
          type: string
          description: A comment on the task, intended for commenting from the frontend
        tags:
          type: array
          items:
            type: string
        parallel:
          type: boolean
          description: Should the tasks run in parallel?
          default: false
        retries:
          type: number
          minimum: 0
          default: 0
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        createdTimestamp:
          $ref: '#/components/schemas/DateTime'
        createdBy:
          $ref: '#/components/schemas/Requestor'
        modifiedTimestamp:
          $ref: '#/components/schemas/DateTime'
        modifiedBy:
          $ref: '#/components/schemas/Requestor'
    Statuses:
      type: string
      enum:
        - waiting
        - running
        - retired
        - suspended
        - completed
        - failed
    Task:
      type: object
      description: Represents a job task
      required:
        - system
        - method
      properties:
        _id:
          $ref: '#/components/schemas/MongoDBId'
        system:
          type: string
          minLength: 1
        method:
          type: string
          description: The method to run for the system
          minLength: 1
        group:
          type: string
          description: 'Tasks in the same group will be run in parallel'
          minLength: 1
        status:
          $ref: '#/components/schemas/Statuses'
        regarding:
          type: string
          description: What does this task regard?
        delayUntil:
          $ref: '#/components/schemas/DateTime'
        tags:
          type: array
          items:
            type: string
        comment:
          type: string
          description: A comment on the task, intended for commenting from the frontend
        retries:
          type: number
          description: The number of retries of this task
          default: 0
        data:
          oneOf:
            - type: object
              minProperties: 1
            - type: array
              minItems: 1
            - type: string
              minLength: 1
            - type: number
            - type: boolean
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        dataMapping:
          oneOf:
            - type: array
              description: An array of paths ('*', 'fruits=fruits', 'fruits.apple=fruits.apple') to the collected data needed from previous task
              example:
                value: ['fruits.apple', 'fruits.apple=vegetables.carrot']
                summary: 'Apple property in data.fruits from previous task'
            - type: string
              description: A path ('*', 'fruits=fruits', 'fruits.apple=fruits.apple') to the collected data needed from previous task
              example:
                value: 'fruits.apple=vegetables.carrot'
                summary: 'Apple property in data.fruits from previous task'
        operations:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TaskOperationSuccess'
              - $ref: '#/components/schemas/TaskOperationFailed'
            discriminator:
              propertyName: status
              mapping:
                completed: '#/components/schemas/TaskOperationSuccess'
                failed: '#/components/schemas/TaskOperationFailed'
        createdTimestamp:
          $ref: '#/components/schemas/DateTime'
        modifiedTimestamp:
          $ref: '#/components/schemas/DateTime'
    TaskOperationStatuses:
      type: string
      enum: [completed, failed]
    TaskOperationSuccess:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/TaskOperationStatuses'
        message:
          type: string
        data:
          oneOf:
            - type: object
              minItems: 1
            - type: string
              minLength: 1
            - type: boolean
            - type: array
              minItems: 1
        createdTimestamp:
          $ref: '#/components/schemas/DateTime'
        modifiedTimestamp:
          $ref: '#/components/schemas/DateTime'
    TaskOperationFailed:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/TaskOperationStatuses'
        message:
          type: string
        error:
          oneOf:
            - type: object
              minItems: 1
            - type: string
              minLength: 1
            - type: boolean
            - type: array
              minItems: 1
        createdTimestamp:
          $ref: '#/components/schemas/DateTime'
        modifiedTimestamp:
          $ref: '#/components/schemas/DateTime'
    APIKey:
      description: Represents an E18 APIKey
      type: object
      required:
        - name
      properties:
        _id:
          $ref: '#/components/schemas/MongoDBId'
        name:
          type: string
          description: The name of the APIKey
          example: IDM registrator
        enabled:
          type: boolean
          description: Determines if the APIKey is enabled for use
          default: true
        createdTimestamp:
          $ref: '#/components/schemas/DateTime'
        modifiedTimestamp:
          $ref: '#/components/schemas/DateTime'
    File:
      description: A file that the queue uploads to Azure BlobStorage
      type: object
      required:
        - content
      properties:
        fileName:
          type: string
          description: The name of the file. If not specified a guid will be generated
          example: 'abc.pdf'
        content:
          type: string
          description: The files content encoded to base64
    DateTime:
      description: String in ISO 8601 format
      example: '2020-01-01T12:00:00Z'
      type: string
      format: date-time
    MongoDBId:
      type: string
      minLength: 24
      maxLength: 24
      example: 5f208a75f8a0ed560c5ab303
    Requestor:
      type: object
      description: This can either be a user or a APIKey
      properties:
        _id:
          $ref: '#/components/schemas/MongoDBId'
        type:
          type: string
          enum:
            - user
            - apikey
        name:
          type: string
        requestor:
          oneOf:
            - $ref: '#/components/schemas/APIKey'
    Error:
      type: object
      description: The general error format
      properties:
        title:
          type: string
          description: Navnet på feilen hvis noen finnes
        message:
          type: string
          description: En melding som beskriver feilen
        stack:
          type: string
          description: Stack informasjon om hvor i koden problemet oppsto
        status:
          type: number
          description: HTTP status-kode for feilen  
        errors:
          type: array
          items:
            oneOf:
              - type: string
              - type: object
    ValidationError:
      type: object
      description: The error that will be thrown if the request does not comply with this schema
      properties:
        title:
          type: string
          description: Navnet på feilen hvis noen finnes
        message:
          type: string
          description: En melding som beskriver feilen
        stack:
          type: string
          description: Stack informasjon om hvor i koden problemet oppsto
        status:
          type: number
          description: HTTP status-kode for feilen
        path:
          type: string
          description: Endepunktet problemet oppsto i
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: Hvor i input-JSON objektet problemet ble oppdaget i
              message:
                type: string
                description: En beskrivelse av problemet
              errorCode:
                type: string
                description: Kode for feilen hvis det finnes
  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/MongoDBId'
    select:
      in: query
      name: $select
      description: Comma sepparated list of specific properties to get (case sensitive)
      example: 'column1, column2, column3'
      allowReserved: true
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 100
    filter:
      in: query
      name: $filter
      description: OData filter expression (case sensitive)
      example: "status eq 'running'"
      allowReserved: true
      schema:
        type: string
        maxLength: 250
    orderby:
      in: query
      name: $orderby
      description: One or more properties to sort by (case sensitive)
      example: column1, column2
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 100
    skip:
      in: query
      name: $skip
      description: OData skip expression for pagination
      schema:
        type: integer
        minimum: 0
    top:
      in: query
      name: $top
      description: OData expression for the number of items you want returned
      schema:
        type: integer
        minimum: 0
    search:
      in: query
      name: $search
      description: A search term for data. (The search must be a full match) (case sensitive)
      schema:
        type: string
        minLength: 1
        maxLength: 100
  responses:
    400:
      description: 400 Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    401:
      description: Unauthorized
    404:
      description: Not found
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    APIKey:
      type: apiKey
      in: header
      name: X-API-KEY
    Bearer:
      type: http
      scheme: bearer
